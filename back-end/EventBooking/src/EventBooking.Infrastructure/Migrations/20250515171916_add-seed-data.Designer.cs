// <auto-generated />
using System;
using EventBooking.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventBooking.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250515171916_add-seed-data")]
    partial class addseeddata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventBooking.Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "user1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0d789ce0-76a8-4e19-a921-27319e06ff0e",
                            Email = "Shady@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SHADY@EXAMPLE.COM",
                            NormalizedUserName = "SHADY",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "faf53b25-a73c-48e0-9df6-b3eb9118d226",
                            TwoFactorEnabled = false,
                            UserName = "Shady"
                        },
                        new
                        {
                            Id = "user2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b1e8cebd-edb2-4189-93b8-fbdfce226bdb",
                            Email = "Mohamed@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MOHAMED@EXAMPLE.COM",
                            NormalizedUserName = "MOHAMED",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a145f1e-c7aa-48b7-861d-fd9a8e5259fc",
                            TwoFactorEnabled = false,
                            UserName = "Mohamed"
                        },
                        new
                        {
                            Id = "admin1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f12c3de6-9ac1-4e3e-bedb-198b2d225a45",
                            Email = "admin1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN1@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN1",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "34df1383-4441-4aa5-b31b-a3d583d248d0",
                            TwoFactorEnabled = false,
                            UserName = "admin1"
                        });
                });

            modelBuilder.Entity("EventBooking.Domain.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("TicketCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 8,
                            BookingDate = new DateTime(2025, 5, 15, 17, 19, 16, 357, DateTimeKind.Utc).AddTicks(5943),
                            CreatedAt = new DateTime(2025, 5, 15, 17, 19, 16, 357, DateTimeKind.Utc).AddTicks(5943),
                            EventId = 10,
                            TicketCount = 2,
                            UserId = "user1"
                        },
                        new
                        {
                            Id = 9,
                            BookingDate = new DateTime(2025, 5, 15, 17, 19, 16, 357, DateTimeKind.Utc).AddTicks(5945),
                            CreatedAt = new DateTime(2025, 5, 15, 17, 19, 16, 357, DateTimeKind.Utc).AddTicks(5945),
                            EventId = 11,
                            TicketCount = 1,
                            UserId = "user2"
                        });
                });

            modelBuilder.Entity("EventBooking.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Venue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 8,
                            AvailableSeats = 50000,
                            Category = "Football",
                            CreatedAt = new DateTime(2025, 5, 15, 17, 19, 16, 357, DateTimeKind.Utc).AddTicks(5840),
                            CreatedBy = "user1",
                            Description = "The biggest football showdown of the year.",
                            EventDate = new DateTime(2025, 5, 30, 17, 19, 16, 357, DateTimeKind.Utc).AddTicks(5831),
                            ImageUrl = "/images/events/football.webp",
                            Name = "Champions League Final",
                            Price = 99.99m,
                            Venue = "National Stadium"
                        },
                        new
                        {
                            Id = 9,
                            AvailableSeats = 20000,
                            Category = "Basketball",
                            CreatedAt = new DateTime(2025, 5, 15, 17, 19, 16, 357, DateTimeKind.Utc).AddTicks(5844),
                            CreatedBy = "user2",
                            Description = "Experience the thrill of top NBA talent in one spectacular game.",
                            EventDate = new DateTime(2025, 6, 14, 17, 19, 16, 357, DateTimeKind.Utc).AddTicks(5842),
                            ImageUrl = "/images/events/basketball.jpeg",
                            Name = "NBA All-Star Game",
                            Price = 149.99m,
                            Venue = "Madison Square Garden"
                        },
                        new
                        {
                            Id = 10,
                            AvailableSeats = 1000,
                            Category = "Food",
                            CreatedAt = new DateTime(2025, 5, 15, 17, 19, 16, 357, DateTimeKind.Utc).AddTicks(5846),
                            CreatedBy = "user1",
                            Description = "A celebration of world cuisine and culinary innovation.",
                            EventDate = new DateTime(2025, 6, 4, 17, 19, 16, 357, DateTimeKind.Utc).AddTicks(5845),
                            ImageUrl = "/images/events/food.jpg",
                            Name = "Gourmet Food Expo",
                            Price = 25.00m,
                            Venue = "City Exhibition Hall"
                        },
                        new
                        {
                            Id = 11,
                            AvailableSeats = 10000,
                            Category = "Concert",
                            CreatedAt = new DateTime(2025, 5, 15, 17, 19, 16, 357, DateTimeKind.Utc).AddTicks(5850),
                            CreatedBy = "user2",
                            Description = "Join the electrifying concert experience with top artists live.",
                            EventDate = new DateTime(2025, 6, 29, 17, 19, 16, 357, DateTimeKind.Utc).AddTicks(5848),
                            ImageUrl = "/images/events/concert.jpeg",
                            Name = "Live Concert: The Soundwave Tour",
                            Price = 79.99m,
                            Venue = "Open Air Arena"
                        });
                });

            modelBuilder.Entity("EventBooking.Domain.Entities.EventTag", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("EventId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("EventTags");

                    b.HasData(
                        new
                        {
                            EventId = 8,
                            TagId = 6
                        },
                        new
                        {
                            EventId = 9,
                            TagId = 7
                        },
                        new
                        {
                            EventId = 10,
                            TagId = 8
                        });
                });

            modelBuilder.Entity("EventBooking.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("EventBooking.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 5, 15, 17, 19, 16, 357, DateTimeKind.Utc).AddTicks(5804),
                            Name = "Music"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 5, 15, 17, 19, 16, 357, DateTimeKind.Utc).AddTicks(5807),
                            Name = "Conference"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 5, 15, 17, 19, 16, 357, DateTimeKind.Utc).AddTicks(5808),
                            Name = "Workshop"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "admin1",
                            RoleId = "ac58ca5b-0100-4200-8aa4-f43c458923b4"
                        },
                        new
                        {
                            UserId = "user1",
                            RoleId = "a1ff9d3d-b691-4726-b3cd-92d0b0687001"
                        },
                        new
                        {
                            UserId = "user2",
                            RoleId = "a1ff9d3d-b691-4726-b3cd-92d0b0687001"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EventBooking.Domain.Entities.Booking", b =>
                {
                    b.HasOne("EventBooking.Domain.Entities.Event", "Event")
                        .WithMany("Bookings")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventBooking.Domain.Entities.AppUser", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventBooking.Domain.Entities.EventTag", b =>
                {
                    b.HasOne("EventBooking.Domain.Entities.Event", "Event")
                        .WithMany("EventTags")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventBooking.Domain.Entities.Tag", "Tag")
                        .WithMany("EventTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("EventBooking.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("EventBooking.Domain.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventBooking.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventBooking.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventBooking.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventBooking.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventBooking.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("EventBooking.Domain.Entities.Event", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("EventTags");
                });

            modelBuilder.Entity("EventBooking.Domain.Entities.Tag", b =>
                {
                    b.Navigation("EventTags");
                });
#pragma warning restore 612, 618
        }
    }
}
